{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Directive, Input, Output, HostBinding, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nconst MDB_CHECKBOX_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define\n  useExisting: forwardRef(() => MdbCheckboxDirective),\n  multi: true\n};\n\nclass MdbCheckboxChange {}\n\nclass MdbCheckboxDirective {\n  constructor() {\n    this._checked = false;\n    this._value = null;\n    this._disabled = false;\n    this.checkboxChange = new EventEmitter(); // Control Value Accessor Methods\n\n    this.onChange = _ => {};\n\n    this.onTouched = () => {};\n  }\n\n  get checked() {\n    return this._checked;\n  }\n\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  get isDisabled() {\n    return this._disabled;\n  }\n\n  get isChecked() {\n    return this._checked;\n  }\n\n  onCheckboxClick() {\n    this.toggle();\n  }\n\n  onBlur() {\n    this.onTouched();\n  }\n\n  get changeEvent() {\n    const newChangeEvent = new MdbCheckboxChange();\n    newChangeEvent.element = this;\n    newChangeEvent.checked = this.checked;\n    return newChangeEvent;\n  }\n\n  toggle() {\n    if (this.disabled) {\n      return;\n    }\n\n    this._checked = !this._checked;\n    this.onChange(this.checked);\n    this.onCheckboxChange();\n  }\n\n  onCheckboxChange() {\n    this.checkboxChange.emit(this.changeEvent);\n  }\n\n  writeValue(value) {\n    this.value = value;\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n\n}\n\nMdbCheckboxDirective.ɵfac = function MdbCheckboxDirective_Factory(t) {\n  return new (t || MdbCheckboxDirective)();\n};\n\nMdbCheckboxDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbCheckboxDirective,\n  selectors: [[\"\", \"mdbCheckbox\", \"\"]],\n  hostVars: 2,\n  hostBindings: function MdbCheckboxDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MdbCheckboxDirective_click_HostBindingHandler() {\n        return ctx.onCheckboxClick();\n      })(\"blur\", function MdbCheckboxDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"disabled\", ctx.isDisabled)(\"checked\", ctx.isChecked);\n    }\n  },\n  inputs: {\n    checked: \"checked\",\n    value: \"value\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    checkboxChange: \"checkboxChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([MDB_CHECKBOX_VALUE_ACCESSOR])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbCheckboxDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbCheckbox]',\n      providers: [MDB_CHECKBOX_VALUE_ACCESSOR]\n    }]\n  }], function () {\n    return [];\n  }, {\n    checked: [{\n      type: Input,\n      args: ['checked']\n    }],\n    value: [{\n      type: Input,\n      args: ['value']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['disabled']\n    }],\n    checkboxChange: [{\n      type: Output\n    }],\n    isDisabled: [{\n      type: HostBinding,\n      args: ['disabled']\n    }],\n    isChecked: [{\n      type: HostBinding,\n      args: ['checked']\n    }],\n    onCheckboxClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }]\n  });\n})();\n\nclass MdbCheckboxModule {}\n\nMdbCheckboxModule.ɵfac = function MdbCheckboxModule_Factory(t) {\n  return new (t || MdbCheckboxModule)();\n};\n\nMdbCheckboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MdbCheckboxModule\n});\nMdbCheckboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MdbCheckboxDirective],\n      exports: [MdbCheckboxDirective],\n      imports: [CommonModule, FormsModule]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MDB_CHECKBOX_VALUE_ACCESSOR, MdbCheckboxChange, MdbCheckboxDirective, MdbCheckboxModule };","map":{"version":3,"sources":["/Users/alexcampean/Documents/university/sem_4/WEB/examTemplates/dotNetTemplate/dotNetTemplateClient/node_modules/mdb-angular-ui-kit/fesm2015/mdb-angular-ui-kit-checkbox.mjs"],"names":["coerceBooleanProperty","i0","forwardRef","EventEmitter","Directive","Input","Output","HostBinding","HostListener","NgModule","NG_VALUE_ACCESSOR","FormsModule","CommonModule","MDB_CHECKBOX_VALUE_ACCESSOR","provide","useExisting","MdbCheckboxDirective","multi","MdbCheckboxChange","constructor","_checked","_value","_disabled","checkboxChange","onChange","_","onTouched","checked","value","disabled","isDisabled","isChecked","onCheckboxClick","toggle","onBlur","changeEvent","newChangeEvent","element","onCheckboxChange","emit","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","ɵfac","ɵdir","type","args","selector","providers","MdbCheckboxModule","ɵmod","ɵinj","declarations","exports","imports"],"mappings":"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","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Directive, Input, Output, HostBinding, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nconst MDB_CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define\n    useExisting: forwardRef(() => MdbCheckboxDirective),\n    multi: true,\n};\nclass MdbCheckboxChange {\n}\nclass MdbCheckboxDirective {\n    constructor() {\n        this._checked = false;\n        this._value = null;\n        this._disabled = false;\n        this.checkboxChange = new EventEmitter();\n        // Control Value Accessor Methods\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n    }\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this._value = value;\n    }\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    get isDisabled() {\n        return this._disabled;\n    }\n    get isChecked() {\n        return this._checked;\n    }\n    onCheckboxClick() {\n        this.toggle();\n    }\n    onBlur() {\n        this.onTouched();\n    }\n    get changeEvent() {\n        const newChangeEvent = new MdbCheckboxChange();\n        newChangeEvent.element = this;\n        newChangeEvent.checked = this.checked;\n        return newChangeEvent;\n    }\n    toggle() {\n        if (this.disabled) {\n            return;\n        }\n        this._checked = !this._checked;\n        this.onChange(this.checked);\n        this.onCheckboxChange();\n    }\n    onCheckboxChange() {\n        this.checkboxChange.emit(this.changeEvent);\n    }\n    writeValue(value) {\n        this.value = value;\n        this.checked = !!value;\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n}\nMdbCheckboxDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbCheckboxDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMdbCheckboxDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.4\", type: MdbCheckboxDirective, selector: \"[mdbCheckbox]\", inputs: { checked: \"checked\", value: \"value\", disabled: \"disabled\" }, outputs: { checkboxChange: \"checkboxChange\" }, host: { listeners: { \"click\": \"onCheckboxClick()\", \"blur\": \"onBlur()\" }, properties: { \"disabled\": \"this.isDisabled\", \"checked\": \"this.isChecked\" } }, providers: [MDB_CHECKBOX_VALUE_ACCESSOR], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbCheckboxDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbCheckbox]',\n                    providers: [MDB_CHECKBOX_VALUE_ACCESSOR],\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { checked: [{\n                type: Input,\n                args: ['checked']\n            }], value: [{\n                type: Input,\n                args: ['value']\n            }], disabled: [{\n                type: Input,\n                args: ['disabled']\n            }], checkboxChange: [{\n                type: Output\n            }], isDisabled: [{\n                type: HostBinding,\n                args: ['disabled']\n            }], isChecked: [{\n                type: HostBinding,\n                args: ['checked']\n            }], onCheckboxClick: [{\n                type: HostListener,\n                args: ['click']\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }] } });\n\nclass MdbCheckboxModule {\n}\nMdbCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMdbCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbCheckboxModule, declarations: [MdbCheckboxDirective], imports: [CommonModule, FormsModule], exports: [MdbCheckboxDirective] });\nMdbCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbCheckboxModule, imports: [[CommonModule, FormsModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MdbCheckboxDirective],\n                    exports: [MdbCheckboxDirective],\n                    imports: [CommonModule, FormsModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MDB_CHECKBOX_VALUE_ACCESSOR, MdbCheckboxChange, MdbCheckboxDirective, MdbCheckboxModule };\n"]},"metadata":{},"sourceType":"module"}