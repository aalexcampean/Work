{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Directive, Input, HostBinding, forwardRef, ContentChildren, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { Subject, from } from 'rxjs';\nimport { startWith, switchMap, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\nclass MdbRadioDirective {\n  constructor() {\n    this._checked = false;\n    this._value = null;\n    this._disabled = false;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(value) {\n    this._name = value;\n  }\n\n  get checked() {\n    return this._checked;\n  }\n\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  get isDisabled() {\n    return this._disabled;\n  }\n\n  get isChecked() {\n    return this._checked;\n  }\n\n  get nameAttr() {\n    return this.name;\n  }\n\n  _updateName(value) {\n    this._name = value;\n  }\n\n  _updateChecked(value) {\n    this._checked = value;\n  }\n\n  _updateDisabledState(value) {\n    this._disabled = value;\n  }\n\n}\n\nMdbRadioDirective.ɵfac = function MdbRadioDirective_Factory(t) {\n  return new (t || MdbRadioDirective)();\n};\n\nMdbRadioDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbRadioDirective,\n  selectors: [[\"\", \"mdbRadio\", \"\"]],\n  hostVars: 3,\n  hostBindings: function MdbRadioDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"disabled\", ctx.isDisabled)(\"checked\", ctx.isChecked);\n      i0.ɵɵattribute(\"name\", ctx.nameAttr);\n    }\n  },\n  inputs: {\n    name: \"name\",\n    checked: \"checked\",\n    value: \"value\",\n    disabled: \"disabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbRadioDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbRadio]'\n    }]\n  }], function () {\n    return [];\n  }, {\n    name: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input,\n      args: ['checked']\n    }],\n    value: [{\n      type: Input,\n      args: ['value']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['disabled']\n    }],\n    isDisabled: [{\n      type: HostBinding,\n      args: ['disabled']\n    }],\n    isChecked: [{\n      type: HostBinding,\n      args: ['checked']\n    }],\n    nameAttr: [{\n      type: HostBinding,\n      args: ['attr.name']\n    }]\n  });\n})();\n\nconst MDB_RADIO_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define\n  useExisting: forwardRef(() => MdbRadioGroupDirective),\n  multi: true\n};\n\nclass MdbRadioGroupDirective {\n  constructor() {\n    this._disabled = false;\n    this._destroy$ = new Subject();\n\n    this.onChange = _ => {};\n\n    this.onTouched = () => {};\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n\n    if (this.radios) {\n      this._updateChecked();\n    }\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(name) {\n    this._name = name;\n\n    if (this.radios) {\n      this._updateNames();\n    }\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(disabled) {\n    this._disabled = disabled;\n\n    if (this.radios) {\n      this._updateDisabled();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._updateNames();\n\n    this._updateDisabled();\n\n    this.radios.changes.pipe(startWith(this.radios), switchMap(radios => from(Promise.resolve(radios))), takeUntil(this._destroy$)).subscribe(() => this._updateRadiosState());\n  }\n\n  ngOnDestroy() {\n    this._destroy$.next();\n\n    this._destroy$.complete();\n  }\n\n  _updateRadiosState() {\n    this._updateNames();\n\n    this._updateChecked();\n\n    this._updateDisabled();\n  }\n\n  _updateNames() {\n    this.radios.forEach(radio => radio._updateName(this.name));\n  }\n\n  _updateChecked() {\n    this.radios.forEach(radio => {\n      const isChecked = radio.value === this._value;\n\n      radio._updateChecked(isChecked);\n    });\n  }\n\n  _updateDisabled() {\n    this.radios.forEach(radio => radio._updateDisabledState(this._disabled));\n  } // Control value accessor methods\n\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled) {\n    this._disabled = isDisabled;\n\n    this._updateDisabled();\n  }\n\n  writeValue(value) {\n    this.value = value;\n  }\n\n}\n\nMdbRadioGroupDirective.ɵfac = function MdbRadioGroupDirective_Factory(t) {\n  return new (t || MdbRadioGroupDirective)();\n};\n\nMdbRadioGroupDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbRadioGroupDirective,\n  selectors: [[\"\", \"mdbRadioGroup\", \"\"]],\n  contentQueries: function MdbRadioGroupDirective_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MdbRadioDirective, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.radios = _t);\n    }\n  },\n  inputs: {\n    value: \"value\",\n    name: \"name\",\n    disabled: \"disabled\"\n  },\n  features: [i0.ɵɵProvidersFeature([MDB_RADIO_GROUP_VALUE_ACCESSOR])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbRadioGroupDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbRadioGroup]',\n      providers: [MDB_RADIO_GROUP_VALUE_ACCESSOR]\n    }]\n  }], null, {\n    radios: [{\n      type: ContentChildren,\n      args: [MdbRadioDirective, {\n        descendants: true\n      }]\n    }],\n    value: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MdbRadioModule {}\n\nMdbRadioModule.ɵfac = function MdbRadioModule_Factory(t) {\n  return new (t || MdbRadioModule)();\n};\n\nMdbRadioModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MdbRadioModule\n});\nMdbRadioModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbRadioModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MdbRadioDirective, MdbRadioGroupDirective],\n      exports: [MdbRadioDirective, MdbRadioGroupDirective],\n      imports: [CommonModule, FormsModule]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MDB_RADIO_GROUP_VALUE_ACCESSOR, MdbRadioDirective, MdbRadioGroupDirective, MdbRadioModule };","map":{"version":3,"sources":["/Users/alexcampean/Documents/university/sem_4/WEB/examTemplates/dotNetTemplate/dotNetTemplateClient/node_modules/mdb-angular-ui-kit/fesm2015/mdb-angular-ui-kit-radio.mjs"],"names":["coerceBooleanProperty","i0","Directive","Input","HostBinding","forwardRef","ContentChildren","NgModule","NG_VALUE_ACCESSOR","FormsModule","Subject","from","startWith","switchMap","takeUntil","CommonModule","MdbRadioDirective","constructor","_checked","_value","_disabled","name","_name","value","checked","disabled","isDisabled","isChecked","nameAttr","_updateName","_updateChecked","_updateDisabledState","ɵfac","ɵdir","type","args","selector","MDB_RADIO_GROUP_VALUE_ACCESSOR","provide","useExisting","MdbRadioGroupDirective","multi","_destroy$","onChange","_","onTouched","radios","_updateNames","_updateDisabled","ngAfterContentInit","changes","pipe","Promise","resolve","subscribe","_updateRadiosState","ngOnDestroy","next","complete","forEach","radio","registerOnChange","fn","registerOnTouched","setDisabledState","writeValue","providers","descendants","MdbRadioModule","ɵmod","ɵinj","declarations","exports","imports"],"mappings":"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","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Directive, Input, HostBinding, forwardRef, ContentChildren, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { Subject, from } from 'rxjs';\nimport { startWith, switchMap, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\nclass MdbRadioDirective {\n    constructor() {\n        this._checked = false;\n        this._value = null;\n        this._disabled = false;\n    }\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value;\n    }\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n    }\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this._value = value;\n    }\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    get isDisabled() {\n        return this._disabled;\n    }\n    get isChecked() {\n        return this._checked;\n    }\n    get nameAttr() {\n        return this.name;\n    }\n    _updateName(value) {\n        this._name = value;\n    }\n    _updateChecked(value) {\n        this._checked = value;\n    }\n    _updateDisabledState(value) {\n        this._disabled = value;\n    }\n}\nMdbRadioDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRadioDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMdbRadioDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.4\", type: MdbRadioDirective, selector: \"[mdbRadio]\", inputs: { name: \"name\", checked: \"checked\", value: \"value\", disabled: \"disabled\" }, host: { properties: { \"disabled\": \"this.isDisabled\", \"checked\": \"this.isChecked\", \"attr.name\": \"this.nameAttr\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRadioDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbRadio]',\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { name: [{\n                type: Input\n            }], checked: [{\n                type: Input,\n                args: ['checked']\n            }], value: [{\n                type: Input,\n                args: ['value']\n            }], disabled: [{\n                type: Input,\n                args: ['disabled']\n            }], isDisabled: [{\n                type: HostBinding,\n                args: ['disabled']\n            }], isChecked: [{\n                type: HostBinding,\n                args: ['checked']\n            }], nameAttr: [{\n                type: HostBinding,\n                args: ['attr.name']\n            }] } });\n\nconst MDB_RADIO_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define\n    useExisting: forwardRef(() => MdbRadioGroupDirective),\n    multi: true,\n};\nclass MdbRadioGroupDirective {\n    constructor() {\n        this._disabled = false;\n        this._destroy$ = new Subject();\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this._value = value;\n        if (this.radios) {\n            this._updateChecked();\n        }\n    }\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        if (this.radios) {\n            this._updateNames();\n        }\n    }\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(disabled) {\n        this._disabled = disabled;\n        if (this.radios) {\n            this._updateDisabled();\n        }\n    }\n    ngAfterContentInit() {\n        this._updateNames();\n        this._updateDisabled();\n        this.radios.changes\n            .pipe(startWith(this.radios), switchMap((radios) => from(Promise.resolve(radios))), takeUntil(this._destroy$))\n            .subscribe(() => this._updateRadiosState());\n    }\n    ngOnDestroy() {\n        this._destroy$.next();\n        this._destroy$.complete();\n    }\n    _updateRadiosState() {\n        this._updateNames();\n        this._updateChecked();\n        this._updateDisabled();\n    }\n    _updateNames() {\n        this.radios.forEach((radio) => radio._updateName(this.name));\n    }\n    _updateChecked() {\n        this.radios.forEach((radio) => {\n            const isChecked = radio.value === this._value;\n            radio._updateChecked(isChecked);\n        });\n    }\n    _updateDisabled() {\n        this.radios.forEach((radio) => radio._updateDisabledState(this._disabled));\n    }\n    // Control value accessor methods\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this._disabled = isDisabled;\n        this._updateDisabled();\n    }\n    writeValue(value) {\n        this.value = value;\n    }\n}\nMdbRadioGroupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRadioGroupDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMdbRadioGroupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.4\", type: MdbRadioGroupDirective, selector: \"[mdbRadioGroup]\", inputs: { value: \"value\", name: \"name\", disabled: \"disabled\" }, providers: [MDB_RADIO_GROUP_VALUE_ACCESSOR], queries: [{ propertyName: \"radios\", predicate: MdbRadioDirective, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRadioGroupDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbRadioGroup]',\n                    providers: [MDB_RADIO_GROUP_VALUE_ACCESSOR],\n                }]\n        }], propDecorators: { radios: [{\n                type: ContentChildren,\n                args: [MdbRadioDirective, { descendants: true }]\n            }], value: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });\n\nclass MdbRadioModule {\n}\nMdbRadioModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMdbRadioModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRadioModule, declarations: [MdbRadioDirective, MdbRadioGroupDirective], imports: [CommonModule, FormsModule], exports: [MdbRadioDirective, MdbRadioGroupDirective] });\nMdbRadioModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRadioModule, imports: [[CommonModule, FormsModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRadioModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MdbRadioDirective, MdbRadioGroupDirective],\n                    exports: [MdbRadioDirective, MdbRadioGroupDirective],\n                    imports: [CommonModule, FormsModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MDB_RADIO_GROUP_VALUE_ACCESSOR, MdbRadioDirective, MdbRadioGroupDirective, MdbRadioModule };\n"]},"metadata":{},"sourceType":"module"}