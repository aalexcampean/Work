{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, ElementRef, Component, ChangeDetectionStrategy, ViewChild, ContentChild, HostBinding, Optional, Self, Input, HostListener, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/observers';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common'; // eslint-disable-next-line @angular-eslint/directive-class-suffix\n\nconst _c0 = [\"notchLeading\"];\nconst _c1 = [\"notchMiddle\"];\nconst _c2 = [\"*\"];\n\nclass MdbAbstractFormControl {}\n\nMdbAbstractFormControl.ɵfac = function MdbAbstractFormControl_Factory(t) {\n  return new (t || MdbAbstractFormControl)();\n};\n\nMdbAbstractFormControl.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbAbstractFormControl\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbAbstractFormControl, [{\n    type: Directive\n  }], null, null);\n})(); // eslint-disable-next-line @angular-eslint/component-class-suffix\n\n\nclass MdbLabelDirective {\n  constructor() {}\n\n}\n\nMdbLabelDirective.ɵfac = function MdbLabelDirective_Factory(t) {\n  return new (t || MdbLabelDirective)();\n};\n\nMdbLabelDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbLabelDirective,\n  selectors: [[\"\", \"mdbLabel\", \"\"]],\n  exportAs: [\"mdbLabel\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbLabelDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbLabel]',\n      exportAs: 'mdbLabel'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass MdbFormControlComponent {\n  constructor(_renderer, _contentObserver, _elementRef, _ngZone) {\n    this._renderer = _renderer;\n    this._contentObserver = _contentObserver;\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this.outline = true;\n    this._destroy$ = new Subject();\n    this._notchLeadingLength = 9;\n    this._labelMarginLeft = 0;\n    this._labelGapPadding = 8;\n    this._labelScale = 0.8;\n    this._recalculateGapWhenVisible = false;\n  }\n\n  get input() {\n    return this._formControl.input;\n  }\n\n  ngAfterContentInit() {\n    if (this._label) {\n      this._updateBorderGap();\n    } else {\n      this._renderer.addClass(this.input, 'placeholder-active');\n    }\n\n    this._updateLabelActiveState();\n\n    if (this._label) {\n      this._contentObserver.observe(this._label.nativeElement).pipe(takeUntil(this._destroy$)).subscribe(() => {\n        this._updateBorderGap();\n      });\n    }\n\n    this._formControl.stateChanges.pipe(takeUntil(this._destroy$)).subscribe(() => {\n      this._updateLabelActiveState();\n\n      if (this._label) {\n        this._updateBorderGap();\n      }\n    });\n\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.pipe(takeUntil(this._destroy$)).subscribe(() => {\n        if (this._label && this._recalculateGapWhenVisible) {\n          this._updateBorderGap();\n        }\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroy$.next();\n\n    this._destroy$.unsubscribe();\n  }\n\n  _getLabelWidth() {\n    return this._label.nativeElement.clientWidth * this._labelScale + this._labelGapPadding;\n  }\n\n  _updateBorderGap() {\n    // Element is in DOM but is not visible, we need to recalculate the gap when element\n    // is displayed. This problem may occur in components such as tabs where content of\n    // inactive tabs has display:none styles\n    if (this._isHidden()) {\n      this._recalculateGapWhenVisible = true;\n      return;\n    }\n\n    const notchLeadingWidth = `${this._labelMarginLeft + this._notchLeadingLength}px`;\n    const notchMiddleWidth = `${this._getLabelWidth()}px`;\n    this._notchLeading.nativeElement.style.width = notchLeadingWidth;\n    this._notchMiddle.nativeElement.style.width = notchMiddleWidth;\n    this._label.nativeElement.style.marginLeft = `${this._labelMarginLeft}px`;\n    this._recalculateGapWhenVisible = false;\n  }\n\n  _updateLabelActiveState() {\n    if (this._isLabelActive()) {\n      this._renderer.addClass(this.input, 'active');\n    } else {\n      this._renderer.removeClass(this.input, 'active');\n    }\n  }\n\n  _isLabelActive() {\n    return this._formControl && this._formControl.labelActive;\n  }\n\n  _isHidden() {\n    const el = this._elementRef.nativeElement;\n    return !el.offsetHeight && !el.offsetWidth;\n  }\n\n}\n\nMdbFormControlComponent.ɵfac = function MdbFormControlComponent_Factory(t) {\n  return new (t || MdbFormControlComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.ContentObserver), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMdbFormControlComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MdbFormControlComponent,\n  selectors: [[\"mdb-form-control\"]],\n  contentQueries: function MdbFormControlComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MdbAbstractFormControl, 7);\n      i0.ɵɵcontentQuery(dirIndex, MdbLabelDirective, 7, ElementRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._formControl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._label = _t.first);\n    }\n  },\n  viewQuery: function MdbFormControlComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n      i0.ɵɵviewQuery(_c1, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._notchLeading = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._notchMiddle = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function MdbFormControlComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"form-outline\", ctx.outline);\n    }\n  },\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 0,\n  consts: [[1, \"form-notch\"], [1, \"form-notch-leading\"], [\"notchLeading\", \"\"], [1, \"form-notch-middle\"], [\"notchMiddle\", \"\"], [1, \"form-notch-trailing\"]],\n  template: function MdbFormControlComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n      i0.ɵɵelementStart(1, \"div\", 0);\n      i0.ɵɵelement(2, \"div\", 1, 2)(4, \"div\", 3, 4)(6, \"div\", 5);\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbFormControlComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mdb-form-control',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<ng-content></ng-content>\\n<div class=\\\"form-notch\\\">\\n  <div #notchLeading class=\\\"form-notch-leading\\\"></div>\\n  <div #notchMiddle class=\\\"form-notch-middle\\\"></div>\\n  <div class=\\\"form-notch-trailing\\\"></div>\\n</div>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i1.ContentObserver\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    _notchLeading: [{\n      type: ViewChild,\n      args: ['notchLeading', {\n        static: true\n      }]\n    }],\n    _notchMiddle: [{\n      type: ViewChild,\n      args: ['notchMiddle', {\n        static: true\n      }]\n    }],\n    _formControl: [{\n      type: ContentChild,\n      args: [MdbAbstractFormControl, {\n        static: true\n      }]\n    }],\n    _label: [{\n      type: ContentChild,\n      args: [MdbLabelDirective, {\n        static: true,\n        read: ElementRef\n      }]\n    }],\n    outline: [{\n      type: HostBinding,\n      args: ['class.form-outline']\n    }]\n  });\n})(); // eslint-disable-next-line @angular-eslint/component-class-suffix\n\n\nclass MdbInputDirective {\n  constructor(_elementRef, _renderer, _ngControl) {\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this._ngControl = _ngControl;\n    this.stateChanges = new Subject();\n    this._focused = false;\n    this._color = '';\n    this._disabled = false;\n    this._readonly = false;\n  }\n\n  ngAfterViewInit() {\n    this._color = getComputedStyle(this._elementRef.nativeElement).color;\n\n    if (this._elementRef.nativeElement.type === 'date') {\n      this._updateTextColorForDateType();\n    }\n  }\n\n  get disabled() {\n    if (this._ngControl && this._ngControl.disabled !== null) {\n      return this._ngControl.disabled;\n    }\n\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  get readonly() {\n    return this._readonly;\n  }\n\n  set readonly(value) {\n    if (value) {\n      this._renderer.setAttribute(this._elementRef.nativeElement, 'readonly', '');\n    } else {\n      this._renderer.removeAttribute(this._elementRef.nativeElement, 'readonly');\n    }\n\n    this._readonly = coerceBooleanProperty(value);\n  }\n\n  get value() {\n    return this._elementRef.nativeElement.value;\n  }\n\n  set value(value) {\n    if (value !== this.value) {\n      this._elementRef.nativeElement.value = value;\n      this._value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  _updateTextColorForDateType() {\n    const actualColor = getComputedStyle(this._elementRef.nativeElement).color;\n    this._color = actualColor !== 'rgba(0, 0, 0, 0)' ? actualColor : this._color;\n    const color = this.labelActive ? this._color : `transparent`;\n\n    this._renderer.setStyle(this._elementRef.nativeElement, 'color', color);\n  }\n\n  _onFocus() {\n    this._focused = true;\n\n    if (this._elementRef.nativeElement.type === 'date') {\n      this._updateTextColorForDateType();\n    }\n\n    this.stateChanges.next();\n  }\n\n  _onBlur() {\n    this._focused = false;\n\n    if (this._elementRef.nativeElement.type === 'date') {\n      this._updateTextColorForDateType();\n    }\n\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    const value = this._elementRef.nativeElement.value;\n\n    if (this._currentNativeValue !== value) {\n      this._currentNativeValue = value;\n      this.stateChanges.next();\n    }\n  }\n\n  get hasValue() {\n    return this._elementRef.nativeElement.value !== '';\n  }\n\n  get focused() {\n    return this._focused;\n  }\n\n  get input() {\n    return this._elementRef.nativeElement;\n  }\n\n  get labelActive() {\n    return this.focused || this.hasValue;\n  }\n\n}\n\nMdbInputDirective.ɵfac = function MdbInputDirective_Factory(t) {\n  return new (t || MdbInputDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1$1.NgControl, 10));\n};\n\nMdbInputDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbInputDirective,\n  selectors: [[\"\", \"mdbInput\", \"\"]],\n  hostVars: 1,\n  hostBindings: function MdbInputDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function MdbInputDirective_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MdbInputDirective_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    readonly: \"readonly\",\n    value: \"value\"\n  },\n  exportAs: [\"mdbInput\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MdbAbstractFormControl,\n    useExisting: MdbInputDirective\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbInputDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbInput]',\n      exportAs: 'mdbInput',\n      providers: [{\n        provide: MdbAbstractFormControl,\n        useExisting: MdbInputDirective\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i1$1.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    disabled: [{\n      type: HostBinding,\n      args: ['disabled']\n    }, {\n      type: Input,\n      args: ['disabled']\n    }],\n    readonly: [{\n      type: Input,\n      args: ['readonly']\n    }],\n    value: [{\n      type: Input\n    }],\n    _onFocus: [{\n      type: HostListener,\n      args: ['focus']\n    }],\n    _onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }]\n  });\n})();\n\nclass MdbFormsModule {}\n\nMdbFormsModule.ɵfac = function MdbFormsModule_Factory(t) {\n  return new (t || MdbFormsModule)();\n};\n\nMdbFormsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MdbFormsModule\n});\nMdbFormsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbFormsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective],\n      exports: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective],\n      imports: [CommonModule, FormsModule]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MdbAbstractFormControl, MdbFormControlComponent, MdbFormsModule, MdbInputDirective, MdbLabelDirective };","map":{"version":3,"sources":["/Users/alexcampean/Documents/university/sem_4/WEB/labs/a9/client/node_modules/mdb-angular-ui-kit/fesm2015/mdb-angular-ui-kit-forms.mjs"],"names":["i0","Directive","ElementRef","Component","ChangeDetectionStrategy","ViewChild","ContentChild","HostBinding","Optional","Self","Input","HostListener","NgModule","Subject","takeUntil","i1","coerceBooleanProperty","i1$1","FormsModule","CommonModule","MdbAbstractFormControl","ɵfac","ɵdir","type","MdbLabelDirective","constructor","args","selector","exportAs","MdbFormControlComponent","_renderer","_contentObserver","_elementRef","_ngZone","outline","_destroy$","_notchLeadingLength","_labelMarginLeft","_labelGapPadding","_labelScale","_recalculateGapWhenVisible","input","_formControl","ngAfterContentInit","_label","_updateBorderGap","addClass","_updateLabelActiveState","observe","nativeElement","pipe","subscribe","stateChanges","runOutsideAngular","onStable","ngOnDestroy","next","unsubscribe","_getLabelWidth","clientWidth","_isHidden","notchLeadingWidth","notchMiddleWidth","_notchLeading","style","width","_notchMiddle","marginLeft","_isLabelActive","removeClass","labelActive","el","offsetHeight","offsetWidth","Renderer2","ContentObserver","NgZone","ɵcmp","changeDetection","OnPush","template","static","read","MdbInputDirective","_ngControl","_focused","_color","_disabled","_readonly","ngAfterViewInit","getComputedStyle","color","_updateTextColorForDateType","disabled","value","readonly","setAttribute","removeAttribute","_value","actualColor","setStyle","_onFocus","_onBlur","ngDoCheck","_currentNativeValue","hasValue","focused","NgControl","provide","useExisting","providers","decorators","MdbFormsModule","ɵmod","ɵinj","declarations","exports","imports"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,uBAA3C,EAAoEC,SAApE,EAA+EC,YAA/E,EAA6FC,WAA7F,EAA0GC,QAA1G,EAAoHC,IAApH,EAA0HC,KAA1H,EAAiIC,YAAjI,EAA+IC,QAA/I,QAA+J,eAA/J;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,OAAO,KAAKC,IAAZ,MAAsB,gBAAtB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,YAAT,QAA6B,iBAA7B,C,CAEA;;;;;;AACA,MAAMC,sBAAN,CAA6B;;AAE7BA,sBAAsB,CAACC,IAAvB;AAAA,mBAAmHD,sBAAnH;AAAA;;AACAA,sBAAsB,CAACE,IAAvB,kBADyGtB,EACzG;AAAA,QAAuGoB;AAAvG;;AACA;AAAA,qDAFyGpB,EAEzG,mBAA2FoB,sBAA3F,EAA+H,CAAC;AACpHG,IAAAA,IAAI,EAAEtB;AAD8G,GAAD,CAA/H;AAAA,K,CAIA;;;AACA,MAAMuB,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,GAAG,CAAG;;AADG;;AAGxBD,iBAAiB,CAACH,IAAlB;AAAA,mBAA8GG,iBAA9G;AAAA;;AACAA,iBAAiB,CAACF,IAAlB,kBAXyGtB,EAWzG;AAAA,QAAkGwB,iBAAlG;AAAA;AAAA;AAAA;;AACA;AAAA,qDAZyGxB,EAYzG,mBAA2FwB,iBAA3F,EAA0H,CAAC;AAC/GD,IAAAA,IAAI,EAAEtB,SADyG;AAE/GyB,IAAAA,IAAI,EAAE,CAAC;AACC;AACAC,MAAAA,QAAQ,EAAE,YAFX;AAGCC,MAAAA,QAAQ,EAAE;AAHX,KAAD;AAFyG,GAAD,CAA1H,EAO4B,YAAY;AAAE,WAAO,EAAP;AAAY,GAPtD;AAAA;;AASA,MAAMC,uBAAN,CAA8B;AAC1BJ,EAAAA,WAAW,CAACK,SAAD,EAAYC,gBAAZ,EAA8BC,WAA9B,EAA2CC,OAA3C,EAAoD;AAC3D,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,SAAL,GAAiB,IAAItB,OAAJ,EAAjB;AACA,SAAKuB,mBAAL,GAA2B,CAA3B;AACA,SAAKC,gBAAL,GAAwB,CAAxB;AACA,SAAKC,gBAAL,GAAwB,CAAxB;AACA,SAAKC,WAAL,GAAmB,GAAnB;AACA,SAAKC,0BAAL,GAAkC,KAAlC;AACH;;AACQ,MAALC,KAAK,GAAG;AACR,WAAO,KAAKC,YAAL,CAAkBD,KAAzB;AACH;;AACDE,EAAAA,kBAAkB,GAAG;AACjB,QAAI,KAAKC,MAAT,EAAiB;AACb,WAAKC,gBAAL;AACH,KAFD,MAGK;AACD,WAAKf,SAAL,CAAegB,QAAf,CAAwB,KAAKL,KAA7B,EAAoC,oBAApC;AACH;;AACD,SAAKM,uBAAL;;AACA,QAAI,KAAKH,MAAT,EAAiB;AACb,WAAKb,gBAAL,CACKiB,OADL,CACa,KAAKJ,MAAL,CAAYK,aADzB,EAEKC,IAFL,CAEUpC,SAAS,CAAC,KAAKqB,SAAN,CAFnB,EAGKgB,SAHL,CAGe,MAAM;AACjB,aAAKN,gBAAL;AACH,OALD;AAMH;;AACD,SAAKH,YAAL,CAAkBU,YAAlB,CAA+BF,IAA/B,CAAoCpC,SAAS,CAAC,KAAKqB,SAAN,CAA7C,EAA+DgB,SAA/D,CAAyE,MAAM;AAC3E,WAAKJ,uBAAL;;AACA,UAAI,KAAKH,MAAT,EAAiB;AACb,aAAKC,gBAAL;AACH;AACJ,KALD;;AAMA,SAAKZ,OAAL,CAAaoB,iBAAb,CAA+B,MAAM;AACjC,WAAKpB,OAAL,CAAaqB,QAAb,CAAsBJ,IAAtB,CAA2BpC,SAAS,CAAC,KAAKqB,SAAN,CAApC,EAAsDgB,SAAtD,CAAgE,MAAM;AAClE,YAAI,KAAKP,MAAL,IAAe,KAAKJ,0BAAxB,EAAoD;AAChD,eAAKK,gBAAL;AACH;AACJ,OAJD;AAKH,KAND;AAOH;;AACDU,EAAAA,WAAW,GAAG;AACV,SAAKpB,SAAL,CAAeqB,IAAf;;AACA,SAAKrB,SAAL,CAAesB,WAAf;AACH;;AACDC,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKd,MAAL,CAAYK,aAAZ,CAA0BU,WAA1B,GAAwC,KAAKpB,WAA7C,GAA2D,KAAKD,gBAAvE;AACH;;AACDO,EAAAA,gBAAgB,GAAG;AACf;AACA;AACA;AACA,QAAI,KAAKe,SAAL,EAAJ,EAAsB;AAClB,WAAKpB,0BAAL,GAAkC,IAAlC;AACA;AACH;;AACD,UAAMqB,iBAAiB,GAAI,GAAE,KAAKxB,gBAAL,GAAwB,KAAKD,mBAAoB,IAA9E;AACA,UAAM0B,gBAAgB,GAAI,GAAE,KAAKJ,cAAL,EAAsB,IAAlD;AACA,SAAKK,aAAL,CAAmBd,aAAnB,CAAiCe,KAAjC,CAAuCC,KAAvC,GAA+CJ,iBAA/C;AACA,SAAKK,YAAL,CAAkBjB,aAAlB,CAAgCe,KAAhC,CAAsCC,KAAtC,GAA8CH,gBAA9C;AACA,SAAKlB,MAAL,CAAYK,aAAZ,CAA0Be,KAA1B,CAAgCG,UAAhC,GAA8C,GAAE,KAAK9B,gBAAiB,IAAtE;AACA,SAAKG,0BAAL,GAAkC,KAAlC;AACH;;AACDO,EAAAA,uBAAuB,GAAG;AACtB,QAAI,KAAKqB,cAAL,EAAJ,EAA2B;AACvB,WAAKtC,SAAL,CAAegB,QAAf,CAAwB,KAAKL,KAA7B,EAAoC,QAApC;AACH,KAFD,MAGK;AACD,WAAKX,SAAL,CAAeuC,WAAf,CAA2B,KAAK5B,KAAhC,EAAuC,QAAvC;AACH;AACJ;;AACD2B,EAAAA,cAAc,GAAG;AACb,WAAO,KAAK1B,YAAL,IAAqB,KAAKA,YAAL,CAAkB4B,WAA9C;AACH;;AACDV,EAAAA,SAAS,GAAG;AACR,UAAMW,EAAE,GAAG,KAAKvC,WAAL,CAAiBiB,aAA5B;AACA,WAAO,CAACsB,EAAE,CAACC,YAAJ,IAAoB,CAACD,EAAE,CAACE,WAA/B;AACH;;AAnFyB;;AAqF9B5C,uBAAuB,CAACR,IAAxB;AAAA,mBAAoHQ,uBAApH,EA1GyG7B,EA0GzG,mBAA6JA,EAAE,CAAC0E,SAAhK,GA1GyG1E,EA0GzG,mBAAsLe,EAAE,CAAC4D,eAAzL,GA1GyG3E,EA0GzG,mBAAqNA,EAAE,CAACE,UAAxN,GA1GyGF,EA0GzG,mBAA+OA,EAAE,CAAC4E,MAAlP;AAAA;;AACA/C,uBAAuB,CAACgD,IAAxB,kBA3GyG7E,EA2GzG;AAAA,QAAwG6B,uBAAxG;AAAA;AAAA;AAAA;AA3GyG7B,MAAAA,EA2GzG,0BAAiSoB,sBAAjS;AA3GyGpB,MAAAA,EA2GzG,0BAA8YwB,iBAA9Y,KAA0btB,UAA1b;AAAA;;AAAA;AAAA;;AA3GyGF,MAAAA,EA2GzG,qBA3GyGA,EA2GzG;AA3GyGA,MAAAA,EA2GzG,qBA3GyGA,EA2GzG;AAAA;AAAA;AAAA;AAAA;AA3GyGA,MAAAA,EA2GzG;AA3GyGA,MAAAA,EA2GzG;AAAA;;AAAA;AAAA;;AA3GyGA,MAAAA,EA2GzG,qBA3GyGA,EA2GzG;AA3GyGA,MAAAA,EA2GzG,qBA3GyGA,EA2GzG;AAAA;AAAA;AAAA;AAAA;AAAA;AA3GyGA,MAAAA,EA2GzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3GyGA,MAAAA,EA2GzG;AA3GyGA,MAAAA,EA2GgnB,gBAAztB;AA3GyGA,MAAAA,EA2G2oB,4BAApvB;AA3GyGA,MAAAA,EA2GyqB,uDAAlxB;AA3GyGA,MAAAA,EA2Gs0B,eAA/6B;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDA5GyGA,EA4GzG,mBAA2F6B,uBAA3F,EAAgI,CAAC;AACrHN,IAAAA,IAAI,EAAEpB,SAD+G;AAErHuB,IAAAA,IAAI,EAAE,CAAC;AAAEC,MAAAA,QAAQ,EAAE,kBAAZ;AAAgCmD,MAAAA,eAAe,EAAE1E,uBAAuB,CAAC2E,MAAzE;AAAiFC,MAAAA,QAAQ,EAAE;AAA3F,KAAD;AAF+G,GAAD,CAAhI,EAG4B,YAAY;AAAE,WAAO,CAAC;AAAEzD,MAAAA,IAAI,EAAEvB,EAAE,CAAC0E;AAAX,KAAD,EAAyB;AAAEnD,MAAAA,IAAI,EAAER,EAAE,CAAC4D;AAAX,KAAzB,EAAuD;AAAEpD,MAAAA,IAAI,EAAEvB,EAAE,CAACE;AAAX,KAAvD,EAAgF;AAAEqB,MAAAA,IAAI,EAAEvB,EAAE,CAAC4E;AAAX,KAAhF,CAAP;AAA8G,GAHxJ,EAG0K;AAAEb,IAAAA,aAAa,EAAE,CAAC;AAC5KxC,MAAAA,IAAI,EAAElB,SADsK;AAE5KqB,MAAAA,IAAI,EAAE,CAAC,cAAD,EAAiB;AAAEuD,QAAAA,MAAM,EAAE;AAAV,OAAjB;AAFsK,KAAD,CAAjB;AAG1Jf,IAAAA,YAAY,EAAE,CAAC;AACf3C,MAAAA,IAAI,EAAElB,SADS;AAEfqB,MAAAA,IAAI,EAAE,CAAC,aAAD,EAAgB;AAAEuD,QAAAA,MAAM,EAAE;AAAV,OAAhB;AAFS,KAAD,CAH4I;AAM1JvC,IAAAA,YAAY,EAAE,CAAC;AACfnB,MAAAA,IAAI,EAAEjB,YADS;AAEfoB,MAAAA,IAAI,EAAE,CAACN,sBAAD,EAAyB;AAAE6D,QAAAA,MAAM,EAAE;AAAV,OAAzB;AAFS,KAAD,CAN4I;AAS1JrC,IAAAA,MAAM,EAAE,CAAC;AACTrB,MAAAA,IAAI,EAAEjB,YADG;AAEToB,MAAAA,IAAI,EAAE,CAACF,iBAAD,EAAoB;AAAEyD,QAAAA,MAAM,EAAE,IAAV;AAAgBC,QAAAA,IAAI,EAAEhF;AAAtB,OAApB;AAFG,KAAD,CATkJ;AAY1JgC,IAAAA,OAAO,EAAE,CAAC;AACVX,MAAAA,IAAI,EAAEhB,WADI;AAEVmB,MAAAA,IAAI,EAAE,CAAC,oBAAD;AAFI,KAAD;AAZiJ,GAH1K;AAAA,K,CAoBA;;;AACA,MAAMyD,iBAAN,CAAwB;AACpB1D,EAAAA,WAAW,CAACO,WAAD,EAAcF,SAAd,EAAyBsD,UAAzB,EAAqC;AAC5C,SAAKpD,WAAL,GAAmBA,WAAnB;AACA,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKsD,UAAL,GAAkBA,UAAlB;AACA,SAAKhC,YAAL,GAAoB,IAAIvC,OAAJ,EAApB;AACA,SAAKwE,QAAL,GAAgB,KAAhB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACH;;AACDC,EAAAA,eAAe,GAAG;AACd,SAAKH,MAAL,GAAcI,gBAAgB,CAAC,KAAK1D,WAAL,CAAiBiB,aAAlB,CAAhB,CAAiD0C,KAA/D;;AACA,QAAI,KAAK3D,WAAL,CAAiBiB,aAAjB,CAA+B1B,IAA/B,KAAwC,MAA5C,EAAoD;AAChD,WAAKqE,2BAAL;AACH;AACJ;;AACW,MAARC,QAAQ,GAAG;AACX,QAAI,KAAKT,UAAL,IAAmB,KAAKA,UAAL,CAAgBS,QAAhB,KAA6B,IAApD,EAA0D;AACtD,aAAO,KAAKT,UAAL,CAAgBS,QAAvB;AACH;;AACD,WAAO,KAAKN,SAAZ;AACH;;AACW,MAARM,QAAQ,CAACC,KAAD,EAAQ;AAChB,SAAKP,SAAL,GAAiBvE,qBAAqB,CAAC8E,KAAD,CAAtC;AACH;;AACW,MAARC,QAAQ,GAAG;AACX,WAAO,KAAKP,SAAZ;AACH;;AACW,MAARO,QAAQ,CAACD,KAAD,EAAQ;AAChB,QAAIA,KAAJ,EAAW;AACP,WAAKhE,SAAL,CAAekE,YAAf,CAA4B,KAAKhE,WAAL,CAAiBiB,aAA7C,EAA4D,UAA5D,EAAwE,EAAxE;AACH,KAFD,MAGK;AACD,WAAKnB,SAAL,CAAemE,eAAf,CAA+B,KAAKjE,WAAL,CAAiBiB,aAAhD,EAA+D,UAA/D;AACH;;AACD,SAAKuC,SAAL,GAAiBxE,qBAAqB,CAAC8E,KAAD,CAAtC;AACH;;AACQ,MAALA,KAAK,GAAG;AACR,WAAO,KAAK9D,WAAL,CAAiBiB,aAAjB,CAA+B6C,KAAtC;AACH;;AACQ,MAALA,KAAK,CAACA,KAAD,EAAQ;AACb,QAAIA,KAAK,KAAK,KAAKA,KAAnB,EAA0B;AACtB,WAAK9D,WAAL,CAAiBiB,aAAjB,CAA+B6C,KAA/B,GAAuCA,KAAvC;AACA,WAAKI,MAAL,GAAcJ,KAAd;AACA,WAAK1C,YAAL,CAAkBI,IAAlB;AACH;AACJ;;AACDoC,EAAAA,2BAA2B,GAAG;AAC1B,UAAMO,WAAW,GAAGT,gBAAgB,CAAC,KAAK1D,WAAL,CAAiBiB,aAAlB,CAAhB,CAAiD0C,KAArE;AACA,SAAKL,MAAL,GAAca,WAAW,KAAK,kBAAhB,GAAqCA,WAArC,GAAmD,KAAKb,MAAtE;AACA,UAAMK,KAAK,GAAG,KAAKrB,WAAL,GAAmB,KAAKgB,MAAxB,GAAkC,aAAhD;;AACA,SAAKxD,SAAL,CAAesE,QAAf,CAAwB,KAAKpE,WAAL,CAAiBiB,aAAzC,EAAwD,OAAxD,EAAiE0C,KAAjE;AACH;;AACDU,EAAAA,QAAQ,GAAG;AACP,SAAKhB,QAAL,GAAgB,IAAhB;;AACA,QAAI,KAAKrD,WAAL,CAAiBiB,aAAjB,CAA+B1B,IAA/B,KAAwC,MAA5C,EAAoD;AAChD,WAAKqE,2BAAL;AACH;;AACD,SAAKxC,YAAL,CAAkBI,IAAlB;AACH;;AACD8C,EAAAA,OAAO,GAAG;AACN,SAAKjB,QAAL,GAAgB,KAAhB;;AACA,QAAI,KAAKrD,WAAL,CAAiBiB,aAAjB,CAA+B1B,IAA/B,KAAwC,MAA5C,EAAoD;AAChD,WAAKqE,2BAAL;AACH;;AACD,SAAKxC,YAAL,CAAkBI,IAAlB;AACH;;AACD+C,EAAAA,SAAS,GAAG;AACR,UAAMT,KAAK,GAAG,KAAK9D,WAAL,CAAiBiB,aAAjB,CAA+B6C,KAA7C;;AACA,QAAI,KAAKU,mBAAL,KAA6BV,KAAjC,EAAwC;AACpC,WAAKU,mBAAL,GAA2BV,KAA3B;AACA,WAAK1C,YAAL,CAAkBI,IAAlB;AACH;AACJ;;AACW,MAARiD,QAAQ,GAAG;AACX,WAAO,KAAKzE,WAAL,CAAiBiB,aAAjB,CAA+B6C,KAA/B,KAAyC,EAAhD;AACH;;AACU,MAAPY,OAAO,GAAG;AACV,WAAO,KAAKrB,QAAZ;AACH;;AACQ,MAAL5C,KAAK,GAAG;AACR,WAAO,KAAKT,WAAL,CAAiBiB,aAAxB;AACH;;AACc,MAAXqB,WAAW,GAAG;AACd,WAAO,KAAKoC,OAAL,IAAgB,KAAKD,QAA5B;AACH;;AAtFmB;;AAwFxBtB,iBAAiB,CAAC9D,IAAlB;AAAA,mBAA8G8D,iBAA9G,EAzNyGnF,EAyNzG,mBAAiJA,EAAE,CAACE,UAApJ,GAzNyGF,EAyNzG,mBAA2KA,EAAE,CAAC0E,SAA9K,GAzNyG1E,EAyNzG,mBAAoMiB,IAAI,CAAC0F,SAAzM;AAAA;;AACAxB,iBAAiB,CAAC7D,IAAlB,kBA1NyGtB,EA0NzG;AAAA,QAAkGmF,iBAAlG;AAAA;AAAA;AAAA;AAAA;AA1NyGnF,MAAAA,EA0NzG;AAAA,eAAkG,cAAlG;AAAA;AAAA,eAAkG,aAAlG;AAAA;AAAA;;AAAA;AA1NyGA,MAAAA,EA0NzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA1NyGA,EA0NzG,oBAAkV,CAAC;AAAE4G,IAAAA,OAAO,EAAExF,sBAAX;AAAmCyF,IAAAA,WAAW,EAAE1B;AAAhD,GAAD,CAAlV;AAAA;;AACA;AAAA,qDA3NyGnF,EA2NzG,mBAA2FmF,iBAA3F,EAA0H,CAAC;AAC/G5D,IAAAA,IAAI,EAAEtB,SADyG;AAE/GyB,IAAAA,IAAI,EAAE,CAAC;AACC;AACAC,MAAAA,QAAQ,EAAE,YAFX;AAGCC,MAAAA,QAAQ,EAAE,UAHX;AAICkF,MAAAA,SAAS,EAAE,CAAC;AAAEF,QAAAA,OAAO,EAAExF,sBAAX;AAAmCyF,QAAAA,WAAW,EAAE1B;AAAhD,OAAD;AAJZ,KAAD;AAFyG,GAAD,CAA1H,EAQ4B,YAAY;AAChC,WAAO,CAAC;AAAE5D,MAAAA,IAAI,EAAEvB,EAAE,CAACE;AAAX,KAAD,EAA0B;AAAEqB,MAAAA,IAAI,EAAEvB,EAAE,CAAC0E;AAAX,KAA1B,EAAkD;AAAEnD,MAAAA,IAAI,EAAEN,IAAI,CAAC0F,SAAb;AAAwBI,MAAAA,UAAU,EAAE,CAAC;AAC9ExF,QAAAA,IAAI,EAAEf;AADwE,OAAD,EAE9E;AACCe,QAAAA,IAAI,EAAEd;AADP,OAF8E;AAApC,KAAlD,CAAP;AAKH,GAdL,EAcuB;AAAEoF,IAAAA,QAAQ,EAAE,CAAC;AACpBtE,MAAAA,IAAI,EAAEhB,WADc;AAEpBmB,MAAAA,IAAI,EAAE,CAAC,UAAD;AAFc,KAAD,EAGpB;AACCH,MAAAA,IAAI,EAAEb,KADP;AAECgB,MAAAA,IAAI,EAAE,CAAC,UAAD;AAFP,KAHoB,CAAZ;AAMPqE,IAAAA,QAAQ,EAAE,CAAC;AACXxE,MAAAA,IAAI,EAAEb,KADK;AAEXgB,MAAAA,IAAI,EAAE,CAAC,UAAD;AAFK,KAAD,CANH;AASPoE,IAAAA,KAAK,EAAE,CAAC;AACRvE,MAAAA,IAAI,EAAEb;AADE,KAAD,CATA;AAWP2F,IAAAA,QAAQ,EAAE,CAAC;AACX9E,MAAAA,IAAI,EAAEZ,YADK;AAEXe,MAAAA,IAAI,EAAE,CAAC,OAAD;AAFK,KAAD,CAXH;AAcP4E,IAAAA,OAAO,EAAE,CAAC;AACV/E,MAAAA,IAAI,EAAEZ,YADI;AAEVe,MAAAA,IAAI,EAAE,CAAC,MAAD;AAFI,KAAD;AAdF,GAdvB;AAAA;;AAiCA,MAAMsF,cAAN,CAAqB;;AAErBA,cAAc,CAAC3F,IAAf;AAAA,mBAA2G2F,cAA3G;AAAA;;AACAA,cAAc,CAACC,IAAf,kBA/PyGjH,EA+PzG;AAAA,QAA4GgH;AAA5G;AACAA,cAAc,CAACE,IAAf,kBAhQyGlH,EAgQzG;AAAA,YAAsI,CAACmB,YAAD,EAAeD,WAAf,CAAtI;AAAA;;AACA;AAAA,qDAjQyGlB,EAiQzG,mBAA2FgH,cAA3F,EAAuH,CAAC;AAC5GzF,IAAAA,IAAI,EAAEX,QADsG;AAE5Gc,IAAAA,IAAI,EAAE,CAAC;AACCyF,MAAAA,YAAY,EAAE,CAACtF,uBAAD,EAA0BsD,iBAA1B,EAA6C3D,iBAA7C,CADf;AAEC4F,MAAAA,OAAO,EAAE,CAACvF,uBAAD,EAA0BsD,iBAA1B,EAA6C3D,iBAA7C,CAFV;AAGC6F,MAAAA,OAAO,EAAE,CAAClG,YAAD,EAAeD,WAAf;AAHV,KAAD;AAFsG,GAAD,CAAvH;AAAA;AASA;AACA;AACA;;;AAEA,SAASE,sBAAT,EAAiCS,uBAAjC,EAA0DmF,cAA1D,EAA0E7B,iBAA1E,EAA6F3D,iBAA7F","sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, ElementRef, Component, ChangeDetectionStrategy, ViewChild, ContentChild, HostBinding, Optional, Self, Input, HostListener, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/observers';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass MdbAbstractFormControl {\n}\nMdbAbstractFormControl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbAbstractFormControl, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMdbAbstractFormControl.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.4\", type: MdbAbstractFormControl, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbAbstractFormControl, decorators: [{\n            type: Directive\n        }] });\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbLabelDirective {\n    constructor() { }\n}\nMdbLabelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbLabelDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMdbLabelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.4\", type: MdbLabelDirective, selector: \"[mdbLabel]\", exportAs: [\"mdbLabel\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbLabelDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbLabel]',\n                    exportAs: 'mdbLabel',\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass MdbFormControlComponent {\n    constructor(_renderer, _contentObserver, _elementRef, _ngZone) {\n        this._renderer = _renderer;\n        this._contentObserver = _contentObserver;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this.outline = true;\n        this._destroy$ = new Subject();\n        this._notchLeadingLength = 9;\n        this._labelMarginLeft = 0;\n        this._labelGapPadding = 8;\n        this._labelScale = 0.8;\n        this._recalculateGapWhenVisible = false;\n    }\n    get input() {\n        return this._formControl.input;\n    }\n    ngAfterContentInit() {\n        if (this._label) {\n            this._updateBorderGap();\n        }\n        else {\n            this._renderer.addClass(this.input, 'placeholder-active');\n        }\n        this._updateLabelActiveState();\n        if (this._label) {\n            this._contentObserver\n                .observe(this._label.nativeElement)\n                .pipe(takeUntil(this._destroy$))\n                .subscribe(() => {\n                this._updateBorderGap();\n            });\n        }\n        this._formControl.stateChanges.pipe(takeUntil(this._destroy$)).subscribe(() => {\n            this._updateLabelActiveState();\n            if (this._label) {\n                this._updateBorderGap();\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                if (this._label && this._recalculateGapWhenVisible) {\n                    this._updateBorderGap();\n                }\n            });\n        });\n    }\n    ngOnDestroy() {\n        this._destroy$.next();\n        this._destroy$.unsubscribe();\n    }\n    _getLabelWidth() {\n        return this._label.nativeElement.clientWidth * this._labelScale + this._labelGapPadding;\n    }\n    _updateBorderGap() {\n        // Element is in DOM but is not visible, we need to recalculate the gap when element\n        // is displayed. This problem may occur in components such as tabs where content of\n        // inactive tabs has display:none styles\n        if (this._isHidden()) {\n            this._recalculateGapWhenVisible = true;\n            return;\n        }\n        const notchLeadingWidth = `${this._labelMarginLeft + this._notchLeadingLength}px`;\n        const notchMiddleWidth = `${this._getLabelWidth()}px`;\n        this._notchLeading.nativeElement.style.width = notchLeadingWidth;\n        this._notchMiddle.nativeElement.style.width = notchMiddleWidth;\n        this._label.nativeElement.style.marginLeft = `${this._labelMarginLeft}px`;\n        this._recalculateGapWhenVisible = false;\n    }\n    _updateLabelActiveState() {\n        if (this._isLabelActive()) {\n            this._renderer.addClass(this.input, 'active');\n        }\n        else {\n            this._renderer.removeClass(this.input, 'active');\n        }\n    }\n    _isLabelActive() {\n        return this._formControl && this._formControl.labelActive;\n    }\n    _isHidden() {\n        const el = this._elementRef.nativeElement;\n        return !el.offsetHeight && !el.offsetWidth;\n    }\n}\nMdbFormControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbFormControlComponent, deps: [{ token: i0.Renderer2 }, { token: i1.ContentObserver }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMdbFormControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.4\", type: MdbFormControlComponent, selector: \"mdb-form-control\", host: { properties: { \"class.form-outline\": \"this.outline\" } }, queries: [{ propertyName: \"_formControl\", first: true, predicate: MdbAbstractFormControl, descendants: true, static: true }, { propertyName: \"_label\", first: true, predicate: MdbLabelDirective, descendants: true, read: ElementRef, static: true }], viewQueries: [{ propertyName: \"_notchLeading\", first: true, predicate: [\"notchLeading\"], descendants: true, static: true }, { propertyName: \"_notchMiddle\", first: true, predicate: [\"notchMiddle\"], descendants: true, static: true }], ngImport: i0, template: \"<ng-content></ng-content>\\n<div class=\\\"form-notch\\\">\\n  <div #notchLeading class=\\\"form-notch-leading\\\"></div>\\n  <div #notchMiddle class=\\\"form-notch-middle\\\"></div>\\n  <div class=\\\"form-notch-trailing\\\"></div>\\n</div>\\n\", changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbFormControlComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mdb-form-control', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ng-content></ng-content>\\n<div class=\\\"form-notch\\\">\\n  <div #notchLeading class=\\\"form-notch-leading\\\"></div>\\n  <div #notchMiddle class=\\\"form-notch-middle\\\"></div>\\n  <div class=\\\"form-notch-trailing\\\"></div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i1.ContentObserver }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { _notchLeading: [{\n                type: ViewChild,\n                args: ['notchLeading', { static: true }]\n            }], _notchMiddle: [{\n                type: ViewChild,\n                args: ['notchMiddle', { static: true }]\n            }], _formControl: [{\n                type: ContentChild,\n                args: [MdbAbstractFormControl, { static: true }]\n            }], _label: [{\n                type: ContentChild,\n                args: [MdbLabelDirective, { static: true, read: ElementRef }]\n            }], outline: [{\n                type: HostBinding,\n                args: ['class.form-outline']\n            }] } });\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbInputDirective {\n    constructor(_elementRef, _renderer, _ngControl) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._ngControl = _ngControl;\n        this.stateChanges = new Subject();\n        this._focused = false;\n        this._color = '';\n        this._disabled = false;\n        this._readonly = false;\n    }\n    ngAfterViewInit() {\n        this._color = getComputedStyle(this._elementRef.nativeElement).color;\n        if (this._elementRef.nativeElement.type === 'date') {\n            this._updateTextColorForDateType();\n        }\n    }\n    get disabled() {\n        if (this._ngControl && this._ngControl.disabled !== null) {\n            return this._ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        if (value) {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'readonly', '');\n        }\n        else {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'readonly');\n        }\n        this._readonly = coerceBooleanProperty(value);\n    }\n    get value() {\n        return this._elementRef.nativeElement.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._elementRef.nativeElement.value = value;\n            this._value = value;\n            this.stateChanges.next();\n        }\n    }\n    _updateTextColorForDateType() {\n        const actualColor = getComputedStyle(this._elementRef.nativeElement).color;\n        this._color = actualColor !== 'rgba(0, 0, 0, 0)' ? actualColor : this._color;\n        const color = this.labelActive ? this._color : `transparent`;\n        this._renderer.setStyle(this._elementRef.nativeElement, 'color', color);\n    }\n    _onFocus() {\n        this._focused = true;\n        if (this._elementRef.nativeElement.type === 'date') {\n            this._updateTextColorForDateType();\n        }\n        this.stateChanges.next();\n    }\n    _onBlur() {\n        this._focused = false;\n        if (this._elementRef.nativeElement.type === 'date') {\n            this._updateTextColorForDateType();\n        }\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        const value = this._elementRef.nativeElement.value;\n        if (this._currentNativeValue !== value) {\n            this._currentNativeValue = value;\n            this.stateChanges.next();\n        }\n    }\n    get hasValue() {\n        return this._elementRef.nativeElement.value !== '';\n    }\n    get focused() {\n        return this._focused;\n    }\n    get input() {\n        return this._elementRef.nativeElement;\n    }\n    get labelActive() {\n        return this.focused || this.hasValue;\n    }\n}\nMdbInputDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbInputDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1$1.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive });\nMdbInputDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.4\", type: MdbInputDirective, selector: \"[mdbInput]\", inputs: { disabled: \"disabled\", readonly: \"readonly\", value: \"value\" }, host: { listeners: { \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"disabled\": \"this.disabled\" } }, providers: [{ provide: MdbAbstractFormControl, useExisting: MdbInputDirective }], exportAs: [\"mdbInput\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbInputDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbInput]',\n                    exportAs: 'mdbInput',\n                    providers: [{ provide: MdbAbstractFormControl, useExisting: MdbInputDirective }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1$1.NgControl, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }] }];\n    }, propDecorators: { disabled: [{\n                type: HostBinding,\n                args: ['disabled']\n            }, {\n                type: Input,\n                args: ['disabled']\n            }], readonly: [{\n                type: Input,\n                args: ['readonly']\n            }], value: [{\n                type: Input\n            }], _onFocus: [{\n                type: HostListener,\n                args: ['focus']\n            }], _onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }] } });\n\nclass MdbFormsModule {\n}\nMdbFormsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbFormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMdbFormsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbFormsModule, declarations: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective], imports: [CommonModule, FormsModule], exports: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective] });\nMdbFormsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbFormsModule, imports: [[CommonModule, FormsModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbFormsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective],\n                    exports: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective],\n                    imports: [CommonModule, FormsModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbAbstractFormControl, MdbFormControlComponent, MdbFormsModule, MdbInputDirective, MdbLabelDirective };\n"]},"metadata":{},"sourceType":"module"}